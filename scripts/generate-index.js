/* eslint-disable @typescript-eslint/no-var-requires */
const globPromise = require('glob-promise');
const fse = require('fs-extra');
const path = require('path');

function capitalize(str) {
	return str[0].toUpperCase() + str.slice(1);
}

async function generateIndex(options) {
	const files = await globPromise(path.join(options.outputDir, '**/*.{ts,tsx}'), {
		ignore: [
			'**/index.ts',
			'**/types/*',
			'**/*.stories*',
			'**/*.Stories*',
			'**/*.test*',
			'**/*.tokens*',
			'**/*.Tokens*',
			'**/icons/*.tsx',
		],
	});

	let previousCategory = '';
	let output = `/**\n * @license SKF Ferris UI Library\n *\n * Notice! Do not edit this manually.\n * This file is autogenerated by \`yarn generate-index\`\n */\n`;

	files.forEach((file) => {
		const directory = path.dirname(file);

		const category = path.dirname(directory).replace('src/', '');

		if (category !== previousCategory) {
			output += `\n/**\n * ${capitalize(category)}\n */\n`;
		}

		// Returns the file name without extension (.ts,.tsx)
		const fileName = path.basename(file, path.extname(file));

		// Check if the current file is a component
		//TODO: Solve below boolean check in a nicer maner (eg. 'ignore files')
		const fileIsComponent =
			path.extname(file) === '.tsx' && directory !== 'src/common/global-styles';

		// Returns the file path without `src` and appends the file name
		const filePath = `${directory.replace('src/', '')}/${fileName}`;
		output += `export { default as ${fileName} } from './${filePath}';\n`;

		// Only output/export type if current file is a component
		if (fileIsComponent) {
			output += `export type { ${fileName}Props } from './${filePath}';\n`;
		}

		previousCategory = category;
	});

	await fse.writeFile(path.join(options.outputDir, 'index.ts'), output);
}

generateIndex({ outputDir: './src/' });
